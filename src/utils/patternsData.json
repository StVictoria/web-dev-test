{"data":[
    {
    "id": 1,
    "question": "Что такое паттерны/шаблоны проектирования? Что они делают?",
    "answer": ["Паттерны проектирования — это часто встречающиеся решения определённой проблемы при проектировании архитектуры программ. Это общая концепция решения той или иной проблемы, которую нужно будет ещё подстроить под нужды программы.", "Паттерны (или шаблоны) проектирования описывают типичные способы решения часто встречающихся проблем при проектировании программ."]
    },
    {
    "id": 2,
    "question": "В чём отличие паттерна от алгоритма?",
    "answer": "Алгоритм — это чёткий набор действий, а паттерн — это высокоуровневое описание решения, реализация которого может отличаться в двух разных программах."
    },
    {
    "id": 3,
    "question": "На какие категории подразделаются паттерны? Опишите их",
    "answer": ["Порождающие: Отвечают за удобное и безопасное создание новых объектов или даже целых семейств объектов.", "Структурные: Отвечают за построение удобных в поддержке иерархий классов.", "Поведенческие: Решают задачи эффективного и безопасного взаимодействия между объектами программы."]
    },
    {"id": 4,
    "question": "Какие существуют паттерны?",
    "answer": "Фабричный метод, Абстрактная фабрика, Адаптер, Мост, Цепочка обязанностей, Команда, Итератор, Посредник, Строитель, ПРототип, Компоновщик, Декоратор, Снимок, Наблюдатель, Состояние, Одиночка, Фасад, Легковес, Стратегия, Шаблонный метод, Посетитель, Заместитель"
    },
    {
    "id": 5,
    "question": "Какие существуют порождающие паттерны?",
    "answer": "Фабричный метод, Абстрактная фабрика, Строитель, Прототип, Одиночка"
    }
    ,
    {
    "id": 6,
    "question": "Какие существуют структурные паттерны?",
    "answer": "Адаптер, Мост, Компоновщик, Декоратор, Фасад, Легковес, Заместитель"
    },
    {
    "id": 7,
    "question": "Какие существуют поведенческие паттерны?",
    "answer": "Цепочка обязанностей, Команда, Интератор, Посредник, Снимок, Наблюдатель, Состояние, Стратегия, Шаблонный метод, Посетитель"
    },
    {
    "id": 8,
    "question": "Что такое фабричный метод?",
    "answer": "Фабричный метод — это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов. То есть предоставляет общий класс, от которого можно наследоваться, получая необходимые общие методы для каждого отдельного подкласса."
    },
    {
    "id": 9,
    "question": "Что такое абстрактная фабрика?",
    "answer": "Абстрактная фабрика — это порождающий паттерн проектирования, который позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам создаваемых объектов."
    }
    ,
    {
    "id": 10,
    "question": "Что такое строитель?",
    "answer": "Строитель — это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово. Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов."
    }
    ,
    {
    "id": 11,
    "question": "Что такое прототип?",
    "answer": "Прототип — это порождающий паттерн проектирования, который позволяет копировать объекты, не вдаваясь в подробности их реализации."
    },
    {
    "id": 12,
    "question": "Что такое одиночка?",
    "answer": "Одиночка — это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа."
    },
    {
    "id": 13,
    "question": "Что такое адаптер?",
    "answer": "Адаптер — это структурный паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе."
    },
    {
    "id": 14,
    "question": "Что такое мост?",
    "answer": "Мост — это структурный паттерн проектирования, который разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию, позволяя изменять их независимо друг от друга."
    },
    {
    "id": 15,
    "question": "Что такое компоновщик?",
    "answer": "Компоновщик — это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную структуру, а затем работать с ней так, как будто это единичный объект."
    },
    {
    "id": 16,
    "question": "Что такое декоратор?",
    "answer": "Декоратор — это структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность, оборачивая их в полезные «обёртки»."
    },
    {
    "id": 17,
    "question": "Что такое фасад?",
    "answer": "Фасад — это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку."
    },
    {
    "id": 18,
    "question": "Что такое легковес?",
    "answer": "Легковес — это структурный паттерн проектирования, который позволяет вместить бóльшее количество объектов в отведённую оперативную память. Легковес экономит память, разделяя общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте."
    },
    {
    "id": 19,
    "question": "Что такое заместитель?",
    "answer": "Заместитель — это структурный паттерн проектирования, который позволяет подставлять вместо реальных объектов специальные объекты-заменители. Эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до или после передачи вызова оригиналу."
    },
    {
    "id": 20,
    "question": "Что такое цепочка обязанностей?",
    "answer": "Цепочка обязанностей — это поведенческий паттерн проектирования, который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи."
    },
    {
    "id": 21,
    "question": "Что такое команда?",
    "answer": "Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций."
    },
    {
    "id": 22,
    "question": "Что такое итератор?",
    "answer": "Итератор — это поведенческий паттерн проектирования, который даёт возможность последовательно обходить элементы составных объектов, не раскрывая их внутреннего представления."
    },
    {
    "id": 23,
    "question": "Что такое посредник?",
    "answer": "Посредник — это поведенческий паттерн проектирования, который позволяет уменьшить связанность множества классов между собой, благодаря перемещению этих связей в один класс-посредник."
    },
    {
    "id": 24,
    "question": "Что такое снимок?",
    "answer": "Снимок — это поведенческий паттерн проектирования, который позволяет сохранять и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации."
    },
    {
    "id": 25,
    "question": "Что такое наблюдатель?",
    "answer": "Наблюдатель — это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах."
    },
    {
    "id": 26,
    "question": "Что такое состояние?",
    "answer": "Состояние — это поведенческий паттерн проектирования, который позволяет объектам менять поведение в зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта."
    },
    {
    "id": 27,
    "question": "Что такое стратегия?",
    "answer": "Стратегия — это поведенческий паттерн проектирования, который определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы."
    },
    {
    "id": 28,
    "question": "Что такое шаблонный метод?",
    "answer": "Шаблонный метод — это поведенческий паттерн проектирования, который определяет скелет алгоритма, перекладывая ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры."
    },
    {
    "id": 29,
    "question": "Что такое посетитель?",
    "answer": "Посетитель — это поведенческий паттерн проектирования, который позволяет добавлять в программу новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться."
    }
]}