{"data": [
    {"id": 1,
    "block": "Основы JavaScript",
    "topic": "Строгий режим",
    "level": "low",
    "question": "Что нужно сделать, чтобы код работал в современном режиме?",
    "answer": "Директива выглядит как строка: 'use strict'. Когда она находится в начале скрипта, весь сценарий работает в «современном» режиме. 'use strict' можно поставить в начале большинства видов функций. Это позволяет включить строгий режим только в конкретной функции. Но обычно люди используют его для всего файла."
    }, 
    {"id": 2,
    "block": "Основы JavaScript",
    "topic": "Строгий режим",
    "level": "low",
    "question": "Как отменить строгий режим use strict?",
    "answer": "Никак. Нет директивы типа 'no use strict', которая возвращала бы движок к старому поведению. Как только мы входим в строгий режим, отменить это невозможно."
    }, 
    {"id": 3,
    "block": "Основы JavaScript",
    "topic": "Переменные",
    "level": "low",
    "question": "Что такое переменная?",
    "answer": "«именованное хранилище» для данных."
    }, 
    {"id": 4,
    "block": "Основы JavaScript",
    "topic": "Переменные",
    "level": "low",
    "question": "Какие есть ограничения касающиеся имён переменных?",
    "answer": "Имя переменной должно содержать только буквы, цифры или символы $ и _. Первый символ не должен быть цифрой."
    }, 
    {"id": 5,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Сколько типов данных существует? Перечислить их.",
    "answer": "8 типов данных: number, BigInt, boolean, string, null, undefined, object, Symbol"
    }, 
    {"id": 6,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Что такое NaN? В результате чего появляется?",
    "answer": "NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции. Значение NaN «прилипчиво». Любая операция с NaN возвращает NaN."
    }, 
    {"id": 7,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Что за тип BigInt? Как записать такое число?",
    "answer": "Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины. Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала."
    }, 
    {"id": 8,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Что значит null и undefined в JavaScript?",
    "answer": "null - просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно». undefined означает, что «значение не было присвоено»."
    }, 
    {"id": 9,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Какие существуют примитивные типы? Почему они так называются?",
    "answer": "number, BigInt, boolean, string, null, undefined. типы называются «примитивными», потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё)/"
    }, 
    {"id": 10,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Как получить тип аргумента?",
    "answer": "C помощью оператора typeof."
    }, 
    {"id": 11,
    "block": "Основы JavaScript",
    "topic": "Типы данных",
    "level": "low",
    "question": "Почему typeof(null) возвращает “object”?",
    "answer": "Это официально признанная ошибка в typeof, ведущая начало с времён создания JavaScript и сохранённая для совместимости. Конечно, null не является объектом. Это специальное значение с отдельным типом."
    }, 
    {"id": 12,
    "block": "Основы JavaScript",
    "topic": "Взаимодействие: alert, prompt, confirm",
    "level": "low",
    "question": "Что такое модальное окно?",
    "answer": "Понятие модальное означает, что пользователь не может взаимодействовать с интерфейсом остальной части страницы, нажимать на другие кнопки и т.д. до тех пор, пока взаимодействует с окном."
    }, 
    {"id": 13,
    "block": "Основы JavaScript",
    "topic": "Взаимодействие: alert, prompt, confirm",
    "level": "low",
    "question": "Что возвращает вызов prompt? Какие аргументы принимает prompt?",
    "answer": "Вызов prompt возвращает текст, указанный в поле для ввода, или null, если ввод отменён пользователем. prompt(title, [default]);",
    "description": ["title - текст для отображения в окне", "default - необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне."]
    }, 
    {"id": 14,
    "block": "Основы JavaScript",
    "topic": "Взаимодействие: alert, prompt, confirm",
    "level": "low",
    "question": "Какие есть особенности использования prompt в IE?",
    "answer": "Для IE всегда устанавливайте значение по умолчанию: Второй параметр является необязательным, но если не указать его, то Internet Explorer вставит строку 'undefined' в поле для ввода."
    }, 
    {"id": 15,
    "block": "Основы JavaScript",
    "topic": "Взаимодействие: alert, prompt, confirm",
    "level": "low",
    "question": "Что отображает функция confirm? Что она возвращает?",
    "answer": "Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена. Результат – true, если нажата кнопка OK. В других случаях – false."
    }, 
    {"id": 16,
    "block": "Основы JavaScript",
    "topic": "Взаимодействие: alert, prompt, confirm",
    "level": "low",
    "question": "Как изменить внешний вид модальных окон?",
    "answer": "Никак. Единственный способ использовать кастомный дизайн - создать своё 'модальное' окно."
    }, 
    {"id": 17,
    "block": "Основы JavaScript",
    "topic": "Преобразование типов данных",
    "level": "low",
    "question": "Какие есть способы преобразования значения к строке?",
    "answer": "String(value), value.toString()"
    }, 
    {"id": 18,
    "block": "Основы JavaScript",
    "topic": "Преобразование типов данных",
    "level": "low",
    "question": "Какие есть способы преобразования значения к числу?",
    "answer": "+value, Number(value)"
    }, 
    {"id": 19,
    "block": "Основы JavaScript",
    "topic": "Преобразование типов данных",
    "level": "low",
    "question": "Что выведет Number(undefined)?",
    "answer": "NaN"
    }, 
    {"id": 20,
    "block": "Основы JavaScript",
    "topic": "Преобразование типов данных",
    "level": "low",
    "question": "Что выведет Number(null)?",
    "answer": "0"
    }, 
    {"id": 21,
    "block": "Основы JavaScript",
    "topic": "Преобразование типов данных",
    "level": "low",
    "question": "Как преобразовать значение к логическому типу?",
    "answer": "Boolean(value)"
    }, 
    {"id": 22,
    "block": "Основы JavaScript",
    "topic": "Преобразование типов данных",
    "level": "low",
    "question": "Какие значения при преобразовании к boolean становятся false? Назвать 5 примеров",
    "answer": "0, null, undefined, NaN, ''"
    }
    , 
    {"id": 23,
    "block": "Основы JavaScript",
    "topic": "Базовые операторы, математика",
    "level": "low",
    "question": "Как получить корень числа в JavaScript?",
    "answer": "value ** (1/2)"
    },  
    {"id": 24,
    "block": "Основы JavaScript",
    "topic": "Базовые операторы, математика",
    "level": "low",
    "question": "Как работает бинарный плюс со строками?",
    "answer": "если бинарный оператор '+' применить к строкам, то он их объединяет в одну строку"
    }, 
    {"id": 25,
    "block": "Основы JavaScript",
    "topic": "Базовые операторы, математика",
    "level": "low",
    "question": "Какой будет результат выражения '1' + 2? А если такое: 2 + 2 + '1'",
    "answer": "12"
    }, 
    {"id": 26,
    "block": "Основы JavaScript",
    "topic": "Базовые операторы, математика",
    "level": "low",
    "question": "Какие побитовые операции существуют? Назвать 7 операций",
    "answer": "",
    "description": ["AND(и) ( & )",
        "OR(или) ( | )",
        "XOR(побитовое исключающее или) ( ^ )",
        "NOT(не) ( ~ )",
       "LEFT SHIFT(левый сдвиг) ( << )",
        "RIGHT SHIFT(правый сдвиг) ( >> )",
        "ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )"
        ]
    }
    , 
    {"id": 27,
    "block": "Основы JavaScript",
    "topic": "Операторы сравнения",
    "level": "low",
    "question": "Каков алгоритм сравнения двух строк? ",
    "answer": "",
    "description": ["Сначала сравниваются первые символы строк.", "Если первый символ первой строки больше (меньше), чем первый символ второй, то первая строка больше (меньше) второй. Сравнение завершено.", "Если первые символы равны, то таким же образом сравниваются уже вторые символы строк.", "Сравнение продолжается, пока не закончится одна из строк.", "Если обе строки заканчиваются одновременно, то они равны. Иначе, большей считается более длинная строка."]
    }
    , 
    {"id": 28,
    "block": "Основы JavaScript",
    "topic": "Условное ветвление",
    "level": "low",
    "question": "Что такое тернарный оператор? Какой синтаксис?",
    "answer": "Условный оператор, позволяющий записывать условия короче, чем конструкция if(…) let result = условие ? значение1 : значение2;"
    }
    , 
    {"id": 29,
    "block": "Основы JavaScript",
    "topic": "Логические операторы",
    "level": "low",
    "question": "Как работает логический оператор ИЛИ?",
    "answer": "",
    "description": ["Вычисляет операнды слева направо.", "Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.", "Если все операнды являются ложными (false), возвращает последний из них."]
    } , 
    {"id": 30,
    "block": "Основы JavaScript",
    "topic": "Логические операторы",
    "level": "low",
    "question": "Как работает логический оператор И?",
    "answer": "",
    "description": ["Вычисляет операнды слева направо.", "Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.", "Если все операнды были истинными, возвращается последний."]
    } , 
    {"id": 31,
    "block": "Основы JavaScript",
    "topic": "Логические операторы",
    "level": "low",
    "question": "Как работает логический оператор НЕ?",
    "answer": "Сначала приводит аргумент к логическому типу true/false. Затем возвращает противоположное значение."
    } , 
    {"id": 32,
    "block": "Основы JavaScript",
    "topic": "Логические операторы",
    "level": "low",
    "question": "В какой последовательности идут приоритеты логических операторов НЕ (!), И (&&), ИЛИ (||) от низкого приоритета к высокому?",
    "answer": "у ИЛИ самый низкий приоритет, у НЕ самый высокий. То есть, ИЛИ, И, НЕ"
    }
    , 
    {"id": 33,
    "block": "Основы JavaScript",
    "topic": "Оператор объединения с null",
    "level": "low",
    "question": "Что такое оператор объединения с null? По какой схеме работает?",
    "answer": "Представляет собой два вопросительных знака. Схема работы: оператор ?? возвращает первый аргумент, если он не null/undefined, иначе второй."
    }  , 
    {"id": 34,
    "block": "Основы JavaScript",
    "topic": "Оператор объединения с null",
    "level": "low",
    "question": "Какая разница между операторами «??» и «| |» ?",
    "answer": "ИЛИ возвращает истинное значение, а ?? определённое значение"
    }  , 
    {"id": 35,
    "block": "Основы JavaScript",
    "topic": "Оператор объединения с null",
    "level": "low",
    "question": "Какая будет ошибка в выражении let x = 1 && 2 ?? 3; ? Почему она появляется? Как её обойти?",
    "answer": "Синтаксическая ошибка, т.к. запрещено использовать оператор объединения с null вместе с операторами ||, &&. Обойти это ограничение можно если поставить скобки вокруг выражения с ??"
    }
    , 
    {"id": 36,
    "block": "Основы JavaScript",
    "topic": "Циклы while и for",
    "level": "low",
    "question": "Что такое итерация?",
    "answer": "Одно выполнение тела цикла"
    }, 
    {"id": 37,
    "block": "Основы JavaScript",
    "topic": "Циклы while и for",
    "level": "low",
    "question": "Что делает директива break?",
    "answer": "Директива break полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert."
    }, 
    {"id": 38,
    "block": "Основы JavaScript",
    "topic": "Циклы while и for",
    "level": "low",
    "question": "Что делает директива continue?",
    "answer": "Директива continue – «облегчённая версия» break. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true)."
    }, 
    {"id": 39,
    "block": "Основы JavaScript",
    "topic": "Циклы while и for",
    "level": "low",
    "question": "Как создаётся метка в цикле? Зачем она нужна?",
    "answer": "Метка имеет вид идентификатора с двоеточием перед циклом. Используется для выхода одновременно из нескольких уровней цикла сразу."
    }
    , 
    {"id": 40,
    "block": "Основы JavaScript",
    "topic": "Конструкция switch",
    "level": "low",
    "question": "Что есть в конструкции switch?",
    "answer": "Конструкция switch имеет один или более блок case и необязательный блок default."
    }, 
    {"id": 41,
    "block": "Основы JavaScript",
    "topic": "Function Expression",
    "level": "low",
    "question": "В чём отличие Function Expression от Function Declaration?",
    "answer": "",
    "description": ["- Function Declaration: функция объявляется отдельной конструкцией «function…» в основном потоке кода.", "- Function Expression: функция, созданная внутри другого выражения или синтаксической конструкции. В данном случае функция создаётся в правой части «выражения присваивания» =", "- Function Expression создаётся, когда выполнение доходит до него, и затем уже может использоваться."]
    } , 
    {"id": 42,
    "block": "Качество кода",
    "topic": "",
    "level": "low",
    "question": "Что такое отладка?",
    "answer": "процесс поиска и исправления ошибок в скрипте"
    } , 
    {"id": 43,
    "block": "Качество кода",
    "topic": "",
    "level": "low",
    "question": "Сколько есть способов приостановить выполнение скрипта? Какие это способы?",
    "answer": "3",
    "description": ["Точками останова.", "Использованием в коде команды debugger.", "При ошибке (если инструменты разработчика открыты и опция включена)."]
    }
    , 
    {"id": 44,
    "block": "Объекты: основы",
     "topic": "Объекты",
    "level": "low",
    "question": "Для чего используются объекты?",
    "answer": "для хранения коллекций различных значений и более сложных сущностей"
    }, 
    {"id": 45,
    "block": "Объекты: основы",
     "topic": "Объекты",
    "level": "low",
    "question": "Какой оператор используется для удаления свойства из объекта?",
    "answer": "delete. Например: delete user.age;"
    }, 
    {"id": 46,
    "block": "Объекты: основы",
     "topic": "Объекты",
    "level": "low",
    "question": "Как получить доступ к значению, имя которого состоит из нескольких слов?",
    "answer": ": obj['some prop name'] = true;"
    }, 
    {"id": 47,
    "block": "Объекты: основы",
     "topic": "Объекты",
    "level": "medium",
    "question": "Какое значение можно установить в свойство __proto__ ?",
    "answer": "Только объектное"
    }, 
    {"id": 48,
    "block": "Объекты: основы",
     "topic": "Объекты",
    "level": "low",
    "question": "Как проверить существование свойства в объекте?",
    "answer": "С помощью оператора in"
    }
    , 
    {"id": 49,
    "block": "Объекты: основы",
     "topic": "Копирование объектов и ссылки",
    "level": "low",
    "question": "Что хранит в себе переменная, которой был присвоен объект?",
    "answer": "Переменная хранит его «адрес в памяти», другими словами «ссылку» на него."
    }, 
    {"id": 50,
    "block": "Объекты: основы",
     "topic": "Копирование объектов и ссылки",
    "level": "low",
    "question": "Что делает метод Object.assign? Какой синтаксис?",
    "answer": "Object.assign(dest, [src1, src2, src3...])",
    "description": ["Первый аргумент dest — целевой объект.", "Остальные аргументы src1, ..., srcN (может быть столько, сколько нужно) являются исходными объектами", "Метод копирует свойства всех исходных объектов src1, ..., srcN в целевой объект dest. То есть, свойства всех перечисленных объектов, начиная со второго, копируются в первый объект.", "Возвращает объект dest.", "С помощью него можно склонировать объект или объединить несколько объектов в один новый."]
    }
    , 
    {"id": 51,
    "block": "Объекты: основы",
     "topic": "Сборка мусора",
    "level": "medium",
    "question": "Какой принцип является основной концепцией управления памятью в JavaScript?",
    "answer": "принцип достижимости."
    },
    {"id": 52,
    "block": "Объекты: основы",
     "topic": "Сборка мусора",
    "level": "low",
    "question": "Что делает фоновый процесс «сборщик мусора» в JavaScript?",
    "answer": "Он следит за всеми объектами и удаляет те, которые стали недостижимы.;"
    },
    {"id": 53,
    "block": "Объекты: основы",
     "topic": "Копирование объектов и ссылки",
    "level": "medium",
    "question": "Как сделать глубокое клонирование?",
    "answer": "с помощью рекурсии или использовать готовую реализацию - метод _.cloneDeep(obj) из JavaScript-библиотеки lodash."
    },
    {"id": 54,
    "block": "Объекты: основы",
     "topic": "Сборка мусора",
    "level": "medium",
    "question": "Какой алгоритм использует сборщик мусора в JavaScript? Как этот алгоритм работает?",
    "answer": "",
    "description": ["Основной алгоритм сборки мусора – «алгоритм пометок» (англ. «mark-and-sweep»).", "Согласно этому алгоритму, сборщик мусора регулярно выполняет следующие шаги:", "Сборщик мусора «помечает» (запоминает) все корневые объекты.", "Затем он идёт по их ссылкам и помечает все найденные объекты.", "Затем он идёт по ссылкам помеченных объектов и помечает объекты, на которые есть ссылка от них. Все объекты запоминаются, чтобы в будущем не посещать один и тот же объект дважды.", "…И так далее, пока не будут посещены все ссылки (достижимые от корней).", "Все непомеченные объекты удаляются."]
    }
    ,
    {"id": 55,
    "block": "Объекты: основы",
     "topic": "Методы объекта, “this”",
    "level": "low",
    "question": "Для чего нужно ключевое слово this? ",
    "answer": "Для доступа к информации внутри объекта метод может использовать ключевое слово this."
    },
    {"id": 56,
    "block": "Объекты: основы",
     "topic": "Методы объекта, “this”",
    "level": "medium",
    "question": "Что такое Reference Type? ",
    "answer": "специальное значение «ссылочного типа». Значение ссылочного типа – это «триплет»: комбинация из трёх значений (base, name, strict), где:",
    "description": ["base – это объект.", "name – это имя свойства объекта.", "strict – это режим исполнения. Является true, если действует строгий режим (use strict)."]
    },
    {"id": 57,
    "block": "Объекты: основы",
     "topic": "Методы объекта, “this”",
    "level": "low",
    "question": "Когда определяется значение this?",
    "answer": "во время исполнения кода"
    }
]}